# -*- coding: utf-8 -*-
"""SPP_ensem.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TuQ-ts3CjIqE4nTXcnAbTAqtgOPIBxsm
"""

!pip install pykrx
!pip install sklearn
!pip install tensorflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pykrx import stock
from sklearn.ensemble import VotingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

#데이터 불러오기

df = stock.get_market_ohlcv("20200801", "20220810", "055550") #신한지주.

# 데이터 추출
closing_price = df['종가'].values
maximum = df['고가'].values
volume = df['거래량'].values

# # 데이터 표준화
scaler = MinMaxScaler()
closing_price = scaler.fit_transform(closing_price.reshape(-1, 1))
maximum = scaler.fit_transform(maximum.reshape(-1, 1))
volume = scaler.fit_transform(volume.reshape(-1, 1))

X = np.concatenate((maximum,volume), axis=1)

X = X[14:]
closing_price_new = closing_price[14:] #lstm 데이터가 14일 이후부터 있기 때문에 처리

# print(X)

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, closing_price_new, test_size=0.2) #shuffle=False)

# print(X_train)
# print(X_test)

"""# **SVM**"""

def svm_fit():
  # SVR 모델 생성하여 학습함.
  svm_model = SVR(kernel='rbf')  # Radial basis function (RBF) 커널 사용 <->linear regression도 있다.

  # 모델 학습
  svm_model.fit(X_train, y_train)

  # 예측
  y_pred = svm_model.predict(X_test)

  # 성능 평가 (평균 제곱 오차)
  mse = mean_squared_error(y_test, y_pred)
  print(f'Mean Squared Error: {mse}')

  return svm_model

# 예측 결과 시각화
# plt.figure(figsize=(12, 6))
# plt.plot(y_test, label='True')
# plt.plot(y_pred, label='Predicted')
# plt.legend()
# plt.show()

"""## **LSTM**"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

def lstm_fit(): # lstm 데이터 생성 및 모델 구성, 학습하는 함수.

  # 데이터 시퀀스 생성
  sequence_length = 14

  lstm_X, lstm_y = [], []

  for i in range(len(closing_price) - sequence_length):
      lstm_X.append(np.concatenate((closing_price[i:i+sequence_length], volume[i:i+sequence_length]), axis=1))
      lstm_y.append(closing_price[i+sequence_length])

  lstm_X = np.array(lstm_X)
  lstm_y = np.array(lstm_y)

  # # 학습 데이터와 테스트 데이터로 분할
  X_train, X_test, y_train, y_test = train_test_split(lstm_X, lstm_y, test_size=0.2, random_state=0, shuffle=False)

  # LSTM 모델 구성
  lstm_model = Sequential()
  lstm_model.add(LSTM(50, input_shape=(X_train.shape[1], X_train.shape[2]))) # 14, 2
  lstm_model.add(Dense(1))
  lstm_model.compile(optimizer='adam', loss='mean_squared_error')

  # 모델 학습
  lstm_model.fit(X_train, y_train, epochs=50, batch_size=32)

  # 모델 실행
  loss = lstm_model.evaluate(X_test, y_test)
  print(f'Test Loss: {loss}')

  return lstm_model, X_test

# # 예측
# y_pred = lstm_model.predict(X_test)

# # 예측 결과 시각화
# plt.figure(figsize=(12, 6))
# plt.plot(y_test, label='True')
# plt.plot(y_pred, label='Predicted')
# plt.legend()
# plt.show()

"""## **transformer**"""

transformer_model = ...  # 트랜스포머 모델을 구성하고 학습한 모델







# # 하위 모델 생성
lstm_model, X_test_lstm =  lstm_fit()  # LSTM 모델을 구성하고 학습한 모델
svm_model = svm_fit() # SVM 모델

# 하위 모델 예측
lstm_predictions = lstm_model.predict(X_test_lstm) #transformer_predictions = transformer_model.predict(X_test)
svm_predictions = svm_model.predict(X_test)


lstm_predictions = lstm_predictions.reshape(lstm_predictions.shape[0])
y_test = y_test.reshape(y_test.shape[0])

# print(lstm_predictions)
# print(svm_predictions)
# print(y_test)

def calculate_accuracy(predicted_prices, actual_prices):
    if len(actual_prices) != len(predicted_prices):
        raise ValueError("데이터의 길이가 일치해야 합니다.")

    correct_predictions = 0

    for i in range(len(actual_prices) - 1):
        if (predicted_prices[i+1] - actual_prices[i]) * (actual_prices[i+1] - actual_prices[i]) > 0:
            correct_predictions += 1

    accuracy = (correct_predictions / (len(actual_prices) - 1)) * 100  # 정확도 계산 (마지막 데이터는 다음 데이터가 없어서 제외)

    return accuracy


lstm_accuracy=calculate_accuracy(lstm_predictions, y_test)

print(f"정확도: {lstm_accuracy:.6f}%")

# svm_accuracy=calculate_accuracy(svm_predictions, y_test)

# print(f"정확도: {svm_accuracy:.6f}%")

"""정확도 측정 방법...?????!!!?, train, test데이터 나누어주는 부분.. random_state, suffle (아래 코드 참고)"""



"""https://colab.research.google.com/github/teddylee777/machine-learning/blob/master/04-TensorFlow2.0/01-%EC%82%BC%EC%84%B1%EC%A0%84%EC%9E%90-%EC%A3%BC%EA%B0%80%EC%98%88%EC%B8%A1/02-LSTM-stock-forecasting-with-LSTM-financedatareader.ipynb#scrollTo=cojsJN-Kgz_F

"""